[["index.html", "Green Teams R Lab About About the Dashboard Methods Data Sources Cited", " Green Teams R Lab Chris Snyder, MPH 2022-05-27 About About the Dashboard Here is some sample information about the dashboard Methods Here is some sample information about the methods used in the dashboard Data Sources Cited Here is some sample information about the data used in the dashboard "],["intro.html", "Introduction to R Goals R and RStudio So what can R do for my project? Render Documents", " Introduction to R Goals By the end of the Lab, we will have learned: What R and RStudio are and are not How to download, install, and run R and RStudio How to install and load new R packages How to start performing math operations in R How to start graphing data in R R and RStudio What is R? R Logo High level, interpreted, programming language Designed specifically for statistics and data science Functionality is expanded by the R community (via packages) and by the user (via user-defined functions) Prerequisite for RStudio What is RStudio? RStudio Logo Interactive Development Environment, software designed to make using R much easier Provides a Graphical User Interface and project management tools. Tool to help manage R projects, packages, and environments So what can R do for my project? Below are a list of examples to give some ideas as to how R can help inform your Green Team projects throughout the summer. Sort and Tabulate Data R has many tools to help sort, filter, and manipulate data tables to create presentation-ready tables like this. Table 1: Top Six Fuel Efficient 4-Cylinder Engines Make and Model Miles per Gallon Number of Cylinders Displacement in Cubic Inches Gross Horsepower Toyota Corolla 33.9 4 71.1 65 Fiat 128 32.4 4 78.7 66 Honda Civic 30.4 4 75.7 52 Lotus Europa 30.4 4 95.1 113 Fiat X1-9 27.3 4 79.0 66 Porsche 914-2 26.0 4 120.3 91 Plot Descriptive Statistics R has strong graphical tools to help present descriptive statistics about the data that you collect. Plot Statistical Tests R has strong statistical and graphical tools to help conduct your research and present your findings. Plot Principal Component Analysis R supports many varied types of analysis, such as Principal Component Analysis. Map Choropleth and Geo-spatial Data R also supports geo-spatial analysis and creating GIS visuals. We can make interactive maps within web pages. We can also make static maps for publication. Render Documents R and RStudio also come with support for authoring documents: RMarkdown. This presentation and web page were created in R! It is created using R Markdown, which combines Markdown formatting and R code. Using this, we can make tables and graphs quickly, and generate plots and graphics, without worrying about document formatting or image resolution. We can create Power Point presentations, web pages and dashboards, books, pdfs, and word documents. "],["intro-lab.html", "Intro to R Lab Run and Source R Code Install R Packages Load R Packages Object Assignment Math Operations Data Frames and Vectors Math with Data Frames Descriptive Plots Goals", " Intro to R Lab This is the first guided lab section, and will act as a quick introduction to how to begin using R and its Interactive Development Environment (IDE) RStudio. Launch RStudio now if you have not done so already. You should see a screen similar to the one below. Run and Source R Code Running R Code is the process of giving instructions to R one line (one complete instruction) at a time. R code can be run interactively both in the R console and RStudio file editor. Code is run one line or command at a time using Enter, when typed into the console. The selected line, or one whole complete instruction, in an R source file open in RStudio can be run using Ctrl+Enter on Windows and Unix or Cmd+Enter on Mac. Sourcing R Code is the process of giving many instructions to R at once from a specific file source. R code can be saved as an R source file (.R) to use later Source files can be run in their entirety using the source() function, or in RStudio, using Ctrl+Shift+S on Windows and Unix or Cmd+Shift+S on Mac. Source files can be shared with partners, or used on different computers to create repeatable results. Install R Packages R packages are installed in the console via the install.packages() function. This will install packages from CRAN, the Comprehensive R Archive Network. Packages in development or not on CRAN are installed via the install_github() function, in the package devtools. Packages can be searched for and installed with a GUI as well within RStudio. Install Packages via GUI in RStudio # This code segment will install the package ggplot2 # ggplot2 is used to create graphics in R # Note that when installing a package, we need to put the name in quotes install.packages(&quot;ggplot2&quot;) Load R Packages R packages are loaded in the console via the library() function. This will load packages that have already been installed into the current R environment. Once a package is loaded, it is loaded for the remainder of the R session, and is not script dependent. Note that some packages have dependencies and may benefit from being loaded in a specific order. Packages can be searched for and loaded with a GUI as well within RStudio. List of Packages Available and Loaded via GUI in RStudio # This code segment will load the package ggplot2 # ggplot2 is used to create graphics in R # Note that when loading a package, the name is not in quotes library(ggplot2) Object Assignment One of the most important features of R is object assignment, as R is an Object Oriented Language. # This code segment will assign a list of numbers to an object. # We use `=` to assign values (the right side) to an object (the left side). # The c() function binds data separated by `,` into a vector for us to reference later. # using `:`, we can assign all values of 1 through 10 inclusive, as shorthand. x = c(1:10) # Or, we can assign specific values. # We can also use the `left assign` character `&lt;-` to assign values. It behaves the same as `=`. y &lt;- c(2, 2, 5, 6, 7) We can view the contents of an object by calling that object. By default, this will return the contents of the object to the console output. If you would like to view the contents in a new pane, you need to use the View() function. # Call an object that we have assigned x ## [1] 1 2 3 4 5 6 7 8 9 10 y ## [1] 2 2 5 6 7 # We can also use View(), but it has no effect in this lab document # View(x) Math Operations At its core, R is a tool for math and data science. The following code displays some of the math operators used by R. # This code segment demonstrates some of the math operations in R # Addition 2+2 ## [1] 4 # Subtraction 10-5 ## [1] 5 # Multiplication 5*2 ## [1] 10 # Division 100/5 ## [1] 20 # Exponents 5^2 ## [1] 25 # Notation (*10^x) 1e3 ## [1] 1000 1e-3 ## [1] 0.001 We can also calculate descriptive statistics. This will typically be done using a vector, like we assigned above. # This code segment demonstrates some of the descriptive statistics operations in R # Mean mean(x) ## [1] 5.5 # Median median(y) ## [1] 5 # Min min(x) ## [1] 1 # Max max(x) ## [1] 10 # Sum (total) sum(x) ## [1] 55 Data Frames and Vectors Data Frames and Vectors will be the most common types of data that we work with. A data frame is a 2-dimensional table, and a vector is a 1-dimensional list. Typically, vectors represent the columns of our data frames. # Lets look at a sample data set, mtcars # mtcars is a sample data set with data about cars # We start by calling the object mtcars # We can see how many entries are in our data table using nrow() # it counts the number of rows nrow(mtcars) We can call a data frame to see all of the data available. If we want to reference a specific part of the data frame, we will need to use vectors. # Lets look at a specific vector (column) of mtcars # We need to call the object, and its vector, using the `$` # This example will reference the mpg column from the data frame mtcars # This vector has data about the Miles per Gallon of each car mtcars$mpg # We can see how many entries are in our vector using length() # it counts the number of items in the vector or list length(mtcars$mpg) Math with Data Frames Why would we want to reference a vector? Vector references are the main way to generate graphs, perform math operations, or perform statistical analysis. Lets combine our descriptive statistics with this vector example. # Descriptive stats with vectors of data # The highest Miles per Gallon max(mtcars$mpg) ## [1] 33.9 # The lowest Miles per Gallon min(mtcars$mpg) ## [1] 10.4 # The Average Miles per Gallon mean(mtcars$mpg) ## [1] 20.09062 # The difference in performance from the highest to lowest mpg max(mtcars$mpg) - min(mtcars$mpg) ## [1] 23.5 # Calculating the Mean manually using the sum of MPG and the number of entries. # This should be equal to the mean statement above sum(mtcars$mpg) / length(mtcars$mpg) ## [1] 20.09062 Descriptive Plots We can help describe our data with the plotting functionality of R. Box plots (sometimes box and whisker plots) are helpful for graphing the descriptive stats of a sample, including: minimum, maximum, median, quartile distribution, and inter-quartile range. # A boxplot can help tell us about the descriptive stats of a sample. boxplot(mtcars$mpg) This graphic is not ready to present to someone without titles and labels however. # A boxplot can help tell us about the descriptive stats of a sample. boxplot(mtcars$mpg, xlab = &quot;mtcars Sample&quot;, ylab = &quot;MPB&quot;, main = &quot;Distribution of Fuel Economy in mtcars&quot;) More advanced graphics can be made comparing data that we have in our sample. In this next example, we can examine the mpg of cars based on how many cylinders are in their engines. Based on the plot, we have reason to believe that there is a real difference in MPG based on how many cylinders are in an engine. # A boxplot can help tell us about the descriptive stats of a sample, based on what group it is in. # the `~` denotes that we want to look at mpg, based on the value in `cyl` boxplot(mtcars$mpg~mtcars$cyl, xlab = &quot;Number of Cylinders in Engine&quot;, ylab = &quot;MPG&quot;, main = &quot;Distribution of Fuel Economy by Engine Composition&quot;) We can also plot histograms to examine the distributions within our samples. # A histogram, plotting frequency of response hist(mtcars$mpg, main = &quot;Histogram of mtcars MPG&quot;, xlab = &quot;Reported Miles per Gallon&quot; ) All of the plots so far have used the native functionality of R. To make higher-quality, or just different, graphs, we will need to load a new library. The package ggplot2 is the graphics workhorse behind most of the publication-ready plots rendered in R. Note that it uses many more arguments to create a graph, but that this can produce far more dynamic graphs. As we just saw, R is not great at creating bar charts by default. We can add the package ggplot2 to create a new type of graph. # Load the prerequisite library library(ggplot2) ggplot(mtcars, mapping = aes(x = as.factor(cyl))) + geom_bar() + labs(x = &quot;Engine Cylinders&quot;, y = &quot;Number of Automobiles Recorded&quot;, title = &quot;Cylinders in Automobile Engines&quot;, # The Bolded Graph Title subtitle = &quot;Bar Chart of the Engine Atributes of Vehicles Sampled&quot; # The Graph Subtitle ) + theme(plot.title = element_text(hjust = 0.5), # centers the title plot.subtitle = element_text(hjust = 0.5), # centers the subtitle panel.background = element_blank(), # Removes greyscale background axis.line = element_line() # Adds black line border to x and y axis ) We can also create different styles of scatter charts using ggplot2. # Load the prerequisite library library(ggplot2) ggplot(mtcars, mapping = aes(x = hp, y = mpg)) + geom_point() + labs(x = &quot;Horsepower&quot;, # x axis y = &quot;Miles per Gallon&quot;, # y axis title = &quot;Fuel Economy and Performance&quot;, # The Bolded Graph Title subtitle = &quot;Scatterplot of Fuel Efficiency Compared to Engine Performance &quot; # The Graph Subtitle ) + theme(plot.title = element_text(hjust = 0.5), # centers the title plot.subtitle = element_text(hjust = 0.5), # centers the subtitle panel.background = element_blank(), # Removes greyscale background axis.line = element_line() # Adds black line border to x and y axis ) We can expand on ggplot with another package, ggpubr, which is designed to help with publication-ready graphics made using `ggplot2. In this case, we can enhance our scatter plot to now display the correlation as well. # Load the prerequisite library library(ggplot2) library(ggpubr) ggscatter(mtcars, &quot;hp&quot;, &quot;mpg&quot;, title = &quot;Correlation Plot of Fuel Economy\\nby Engine Performance&quot;, xlab = &quot;Horsepower&quot;, ylab = &quot;Miles per Gallon&quot;, add = &quot;reg.line&quot;, # Draw a regression line conf.int = T, # Adds a confidence interval cor.coef = T # Adds the Correlation ) + theme(plot.title = element_text(hjust = 0.5), # centers the title plot.subtitle = element_text(hjust = 0.5), # centers the subtitle panel.background = element_blank(), # Removes greyscale background axis.line = element_line() # Adds black line border to x and y axis ) Goals At the end of the Lab, we have learned: What R and RStudio are and are not How to download, install, and run R and RStudio How to install and load new R packages How to start performing math operations in R How to start graphing data in R "],["data.html", "Working with Data Goals What Data Formats can R Use? Getting our Data Table Ready to Use in R What format is our Data? Where is our Data Located? Loading our Data Table into R Assigning Data to Objects in R Different Types of Data In R Different Types of Data In R Viewing Data in R", " Working with Data Goals By the end of the Presentation, we will have learned: How to load data from a variety of local formats How to load data from a remote source How to identify common types of data inside of R How to add, remove, sort, and filter the data How to save data to a variety of local formats What Data Formats can R Use? Base R supports reading data from plain text files (.txt) and comma-separated tables (.csv), and compressed RData files readxl supports Excel (.xls, .xlsx) foreign supports SAS, SPSS, and dBase (.dbf) RCurl supports URL, HTTP, FTP jsonlite supports JSON shapefiles supports ESRI shapefiles (.shp, .shx, .dbf) Getting our Data Table Ready to Use in R Table Headers The first row of your data table Names should start with a character Names must be unique, or will be iterated Names should be descriptive or unique IDs Names should avoid iterative counting (Q1, Q2, Q3, …) Table Contents Every row after the first is read as your data Remove any test data, total rows, or metadata before importing Remove empty rows, columns, and table formatting Any missing cell becomes a value of NA What format is our Data? What file type is our data stored in? Identify the file type from the file extension. You may need to turn file extensions on in your file explorer (Windows Explorer, Finder, etc) Check the list of installed packages in R, or CRAN, for a package that can read the file format, or install any new packages that can read that file format, if missing Load the required package(s) using library() Where is our Data Located? Where are the data saved to? Data can be on local, removable, or networked locations. Files should be kept in a permanent location whenever possible Ideally, we will use a relative file path, inside the project: (\"./my_folder/my_file\") We can also use an absolute file path, within the local file system: (\"C:/Users/my_user/my_folder/my_file\") We can use a URL path, for data available on a networked file system: (\"https://www.MyWebsite.com/myPage/my_file.csv\") Loading our Data Table into R Load the required package(s), and read in the data. read.csv(\"./Data/my_file.csv\") library(readxl) read_excel(\"./Data/my_file.xlsx\") load(\"./Data/my_data.Rdata\") Assigning Data to Objects in R R can store any form of data as an object within the R environment. R objects will most frequently be stored in the global environment. Objects are assigned using the assignment operators: = or &lt;-. Both operators will generally behave the same. my_csv = read.csv(\"./Data/my_file.csv\") my_xlsx &lt;- read_excel(\"./Data/my_file.xlsx\") Different Types of Data In R All objects inside of R will be of a specific class. Common data class are listed below. Data Frame: A 2-dimensional table, storing multiple types of data List: A 1-dimensional list, storing multiple types of data Vector: A 1-dimensional list, storing only data of the same type Different Types of Data In R All objects inside of R will be of a specific type. Common data types are listed below. Numeric: .5, 1, 1.5 Integer: 1, 2, 3 Character: \"Anything in Quotes\", \"1\" Logical: TRUE, FALSE Factor: Strongly Disagree, Disagree, Agree, Strongly Agree Viewing Data in R Any object can be viewed by referencing it in the R terminal. For example: mtcars will print the mtcars data frame inside of the console. The View() function is used to display objects in a separate tab. If using View() inside of R, you will receive a new pop-up window with your requested object. If using View() inside of RStudio, you will receive a new tab within your RStudio session. For example: View(mtcars) will open the data frame inside of a new tab. We will be using the mtcars data set in this presentation. Note that View() is one of the few functions in R that begins with capitalization. "],["data-lab.html", "Data Lab Example Data Set mtcars Referencing Different Data in R Sorting Data Frames in R, with One Parameter Sorting Data Frames in R, with Multiple Parameters Sorted Data Example Ordering Data Frames in R Sorted and Reordered Data Example Adding New Vectors to Data Data with New Vectors Example Selecting Specific Vectors of Data Data with Select Vectors Example Save our New Data Goals", " Data Lab Example Data Set mtcars Like in the introduction lab, we will be using the mtcars data set to learn how to process data in R. Below is an excerpt of mtcars, displaying the first 6 cars in the list. The columns have been renamed, and some columns have been removed for ease of presentation. Table 2: Sample of the mtcars data set Make and Model Miles per Gallon Number of Cylinders Displacement in Cubic Inches Gross Horsepower Mazda RX4 21.0 6 160 110 Mazda RX4 Wag 21.0 6 160 110 Datsun 710 22.8 4 108 93 Hornet 4 Drive 21.4 6 258 110 Hornet Sportabout 18.7 8 360 175 Referencing Different Data in R How can we reference our data, once is it loaded? We can reference an object by name, to reference the entire data frame. By default, calling an object will print the contents to the console. # The object name is used to reference the entire object mtcars Vectors can be their own object; however, we most frequently encounter vectors as the columns of a data frame. Named vectors are used to reference a sub-set of an object. We can reference a vector that is part of a data frame using the vector operator $. # The vector name is used to reference the vector within an object mtcars$mpg Numbered indexes are used to reference a sub-set of an object, either a data frame or a vector. We can reference an index position using the index operator [] # Reference the first entry of the vector mpg, of the data frame mtcars mtcars$mpg[1] # Reference the first row and second column of the data frame mtcars mtcars[1, 2] Being able to reference data is a prerequisite skill to being able to sort or filter data. It is additionally a prerequisite for most graphics and statistical tasks in R. Sorting Data Frames in R, with One Parameter Data frames can be sorted by their contents, typically by searching for given values within a specified column using logical operators. The sorting requires at least one specified vector and one desired value. To sort a data frame using one desired value in one vector: mtcars[mtcars$am == 1,] To sort a data frame using multiple desired values in one vector: mtcars[mtcars$cyl %in% c(4, 6),] or mtcars[mtcars$cyl != 8,] Sorting Data Frames in R, with Multiple Parameters Additional logical operators can be used in this index sorting method to make more complex filters. To sort a data frame where either condition may be met: mtcars[mtcars$am == 1 | mtcars$cyl %in% c(4, 6),] To sort a data frame where both conditions must be met: mtcars[mtcars$am == 1 &amp; mtcars$cyl %in% c(4, 6),] Sorted Data Example Table 3: First Six cars from mtcars Data Set, with 4 or 6 cylinders and manual transmission. mtcars[mtcars$am == 1 &amp; mtcars$cyl %in% c(4, 6),] mpg cyl disp hp drat wt qsec vs am gear carb 21.0 6 160.0 110 3.90 2.620 16.46 0 1 4 4 21.0 6 160.0 110 3.90 2.875 17.02 0 1 4 4 22.8 4 108.0 93 3.85 2.320 18.61 1 1 4 1 32.4 4 78.7 66 4.08 2.200 19.47 1 1 4 1 30.4 4 75.7 52 4.93 1.615 18.52 1 1 4 2 33.9 4 71.1 65 4.22 1.835 19.90 1 1 4 1 Ordering Data Frames in R Data frames can be ordered by their contents, by reordering the data based on ascending / descending values of one vector. To sort a data frame of highest to lowest values of mpg: mtcars[order(mtcars$mpg, decreasing = T),] Sorted and Reordered Data Example Table 4: Top Six cars from mtcars Data Set by fuel economy, with 4 or 6 cylinders and manual transmission. mpg cyl disp hp drat wt qsec vs am gear carb 33.9 4 71.1 65 4.22 1.835 19.90 1 1 4 1 32.4 4 78.7 66 4.08 2.200 19.47 1 1 4 1 30.4 4 75.7 52 4.93 1.615 18.52 1 1 4 2 30.4 4 95.1 113 3.77 1.513 16.90 1 1 5 2 27.3 4 79.0 66 4.08 1.935 18.90 1 1 4 1 26.0 4 120.3 91 4.43 2.140 16.70 0 1 5 2 Adding New Vectors to Data Lists and Data frames store data in vectors. A Data frame is practically just a list of vectors. New vectors can be added to an object by assigning a value to a vectorized reference, using the vector operator $: mtcars$model = rownames(mtcars) A constant value can be applied to all rows using vectorized reference: mtcars$axle = 2 A formula can be applied to all rows using vectorized reference: mtcars$kpl = mtcars$mpg * .354 Data with New Vectors Example Table 5: Top Six cars from mtcars Data Set, with Kilometers per Liter and Number of Axles added. mpg cyl disp hp drat wt qsec vs am gear carb kpl axle 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 7.43 2 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 7.43 2 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 8.07 2 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 7.58 2 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 6.62 2 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 6.41 2 Selecting Specific Vectors of Data Data frames can be manipulated easier using the dplyr package. This package offers support for manipulating data frame objects. Data frames can be reduced using the select function: library(dplyr) mtcars = select(mtcars, model, kpl, cyl, hp, axle) Data with Select Vectors Example Table 6: Top Six cars from mtcars Data Set, with Kilometers per Liter and Number of Axles added, and other columns removed. model kpl cyl hp axle Mazda RX4 7.43 6 110 2 Mazda RX4 Wag 7.43 6 110 2 Datsun 710 8.07 4 93 2 Hornet 4 Drive 7.58 6 110 2 Hornet Sportabout 6.62 8 175 2 Valiant 6.41 6 105 2 Save our New Data Data can be written back out from R into files, which can be loaded at a later time, or used in other software. Data can be written to a variety of file types, and does not need to return to its original format. The save() function creates a binarized file that only R can read, but is very fast, space efficient, and can have non-normal-shaped data. write.csv(mtcars, file = \"./mtcars.csv\") save(mtcars, file = \"./mtcars.RData\") Goals At the end of the Presentation, we have learned: How to load data from a variety of local formats How to load data from a remote source How to identify common types of data inside of R How to add, remove, sort, and filter the data How to save data to a variety of local formats "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
