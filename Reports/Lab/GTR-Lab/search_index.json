[["index.html", "Green Teams R Lab About About the Lab", " Green Teams R Lab Chris Snyder, MPH 2022-06-09 About About the Lab Welcome to the Green Teams R Lab! This document will help you and your team use R to complete your projects over the course of the summer. Before we get started, please make sure to download R and RStudio so you can follow along with the examples given in this Lab. Instructions on how to download R are available on the next slides. "],["download.html", "Download R Download and Install R Download and Install RStudio", " Download R The following page details instructions on how to download and install R and it’s IDE, RStudio. These software will help inform your research projects throughout the summer internship program. Download and Install R R is a free software environment for statistical computing and graphics. It compiles and runs on a wide variety of UNIX platforms, Windows and MacOS. It is a powerful tool for performing statistical analysis, graphing, GIS, and report creation. Download R from the Comprehensive R Archive Network (CRAN) at: https://cloud.r-project.org/ Please note: Windows users will download an executable installer (.exe) Mac users will download a package installer (.pkg) Linux users have access via package management systems R must be installed before RStudio Download and Install RStudio Download RStudio Desktop from the RStudio team at: https://www.rstudio.com/products/rstudio/download/#download Please note: Windows users will download an executable installer (.exe) Mac users will download a disk image file (.dmg) Linux users will download a package file (.deb, .rpm) "],["intro.html", "Introduction to R Goals R and RStudio So what can R do for my project? Render Documents", " Introduction to R Goals By the end of the Lab, we will have learned: What R and RStudio are and are not How to download, install, and run R and RStudio How to install and load new R packages How to start performing math operations in R How to start graphing data in R R and RStudio What is R? R Logo High level, interpreted, programming language Designed specifically for statistics and data science Functionality is expanded by the R community (via packages) and by the user (via user-defined functions) Prerequisite for RStudio What is RStudio? RStudio Logo Interactive Development Environment, software designed to make using R much easier Provides a Graphical User Interface and project management tools. Tool to help manage R projects, packages, and environments So what can R do for my project? Below are a list of examples to give some ideas as to how R can help inform your Green Team projects throughout the summer. Sort and Tabulate Data R has many tools to help sort, filter, and manipulate data tables to create presentation-ready tables like this. Table 1: Top Six Fuel Efficient 4-Cylinder Engines Make and Model Miles per Gallon Number of Cylinders Displacement in Cubic Inches Gross Horsepower Toyota Corolla 33.9 4 71.1 65 Fiat 128 32.4 4 78.7 66 Honda Civic 30.4 4 75.7 52 Lotus Europa 30.4 4 95.1 113 Fiat X1-9 27.3 4 79.0 66 Porsche 914-2 26.0 4 120.3 91 Plot Descriptive Statistics R has strong graphical tools to help present descriptive statistics about the data that you collect. Plot Statistical Tests R has strong statistical and graphical tools to help conduct your research and present your findings. Plot Principal Component Analysis R supports many varied types of analysis, such as Principal Component Analysis. Map Choropleth and Geo-spatial Data R also supports geo-spatial analysis and creating GIS visuals. We can make interactive maps within web pages. We can also make static maps for publication. Render Documents R and RStudio also come with support for authoring documents: RMarkdown. This presentation and web page were created in R! It is created using R Markdown, which combines Markdown formatting and R code. Using this, we can make tables and graphs quickly, and generate plots and graphics, without worrying about document formatting or image resolution. We can create Power Point presentations, web pages and dashboards, books, pdfs, and word documents. "],["intro-lab.html", "Intro to R Lab The R Console RStudio Run and Source R Code Install R Packages Load R Packages Object Assignment Math Operations Data Frames and Vectors Math with Data Frames Descriptive Plots Statistical Analysis and Tests Goals", " Intro to R Lab This is the first guided lab section, and will act as a quick introduction to how to begin using R and its Interactive Development Environment (IDE) RStudio. The R Console R Console Inside Terminal Session R is run inside of your computer’s terminal, and can be accessed interactively via command line interface, or passively via scripting. R is launched via the R.exe application on Windows, or through the terminal via R, as a variable in your PATH. The R console can be used as an interactive session, or be used for scripting by more experienced users. R commands are run interactively in the console line-by-line, or by writing and executing an R source file (.R file). The R Console is a powerful tool, and a prerequisite for RStudio. You will rarely need to use the R console outside of RStudio, as the IDE provides you with easier access to the R Console. RStudio RStudio RStudio is run as a desktop application, which acts as an easier way to interact with the R console. RStudio provides the following features in its multi-panel layout: a file and graphics viewer (on the bottom right pane by default), an environment viewer to keep track of data and variables used by the R session (on the top right pane by default), access to the R console (on the bottom left pane by default), and access to a document editor with syntax-highlighting (on the top left pane by default). RStudio allows for a much easier experience running R commands interactively in the console line-by-line, or writing and executing an R source file (.R file). Launch RStudio now if you have not done so already. You should see a screen similar to the one above. You will be able to follow along with the examples provided in this lab session. Run and Source R Code Running R Code is the process of giving instructions to R one line (one complete instruction) at a time. R code can be run interactively both in the R console and RStudio file editor. Code is run one line or command at a time using Enter, when typed into the console. The selected line, or one whole complete instruction, in an R source file open in RStudio can be run using Ctrl+Enter on Windows and Unix or Cmd+Enter on Mac. Sourcing R Code is the process of giving many instructions to R at once from a specific file source. R code can be saved as an R source file (.R) to use later Source files can be run in their entirety using the source() function, or in RStudio, using Ctrl+Shift+S on Windows and Unix or Cmd+Shift+S on Mac. Source files can be shared with partners, or used on different computers to create repeatable results. Install R Packages R packages are installed in the console via the install.packages() function. This will install packages from CRAN, the Comprehensive R Archive Network. Packages in development or not on CRAN are installed via the install_github() function, in the package devtools. Packages can be searched for and installed with a GUI as well within RStudio. Install Packages via GUI in RStudio # This code segment will install the package ggplot2 # ggplot2 is used to create graphics in R # Note that when installing a package, we need to put the name in quotes install.packages(&quot;ggplot2&quot;) Load R Packages R packages are loaded in the console via the library() function. This will load packages that have already been installed into the current R environment. Once a package is loaded, it is loaded for the remainder of the R session, and is not script dependent. Note that some packages have dependencies and may benefit from being loaded in a specific order. Packages can be searched for and loaded with a GUI as well within RStudio. List of Packages Available and Loaded via GUI in RStudio # This code segment will load the package ggplot2 # ggplot2 is used to create graphics in R # Note that when loading a package, the name is not in quotes library(ggplot2) Object Assignment One of the most important features of R is object assignment, as R is an Object Oriented Language. # This code segment will assign a list of numbers to an object. # We use `=` to assign values (the right side) to an object (the left side). # The c() function binds data separated by `,` into a vector for us to reference later. # using `:`, we can assign all values of 1 through 10 inclusive, as shorthand. x = c(1:10) # Or, we can assign specific values. # We can also use the `left assign` character `&lt;-` to assign values. It behaves the same as `=`. y &lt;- c(2, 2, 5, 6, 7) We can view the contents of an object by calling that object. By default, this will return the contents of the object to the console output. If you would like to view the contents in a new pane, you need to use the View() function. # Call an object that we have assigned x ## [1] 1 2 3 4 5 6 7 8 9 10 y ## [1] 2 2 5 6 7 # We can also use View(), but it has no effect in this lab document # View(x) Math Operations At its core, R is a tool for math and data science. The following code displays some of the math operators used by R. # This code segment demonstrates some of the math operations in R # Addition 2+2 ## [1] 4 # Subtraction 10-5 ## [1] 5 # Multiplication 5*2 ## [1] 10 # Division 100/5 ## [1] 20 # Exponents 5^2 ## [1] 25 # Notation (*10^x) 1e3 ## [1] 1000 1e-3 ## [1] 0.001 We can also calculate descriptive statistics. This will typically be done using a vector, like we assigned above. # This code segment demonstrates some of the descriptive statistics operations in R # Mean mean(x) ## [1] 5.5 # Median median(y) ## [1] 5 # Min min(x) ## [1] 1 # Max max(x) ## [1] 10 # Sum (total) sum(x) ## [1] 55 Data Frames and Vectors Data Frames and Vectors will be the most common types of data that we work with. A data frame is a 2-dimensional table, and a vector is a 1-dimensional list. Typically, vectors represent the columns of our data frames. # Lets look at a sample data set, mtcars # mtcars is a sample data set with data about cars # We start by calling the object mtcars # We can see how many entries are in our data table using nrow() # it counts the number of rows nrow(mtcars) We can call a data frame to see all of the data available. If we want to reference a specific part of the data frame, we will need to use vectors. # Lets look at a specific vector (column) of mtcars # We need to call the object, and its vector, using the `$` # This example will reference the mpg column from the data frame mtcars # This vector has data about the Miles per Gallon of each car mtcars$mpg # We can see how many entries are in our vector using length() # it counts the number of items in the vector or list length(mtcars$mpg) Math with Data Frames Why would we want to reference a vector? Vector references are the main way to generate graphs, perform math operations, or perform statistical analysis. Lets combine our descriptive statistics with this vector example. # Descriptive stats with vectors of data # The highest Miles per Gallon max(mtcars$mpg) ## [1] 33.9 # The lowest Miles per Gallon min(mtcars$mpg) ## [1] 10.4 # The Average Miles per Gallon mean(mtcars$mpg) ## [1] 20.09062 # The difference in performance from the highest to lowest mpg max(mtcars$mpg) - min(mtcars$mpg) ## [1] 23.5 # Calculating the Mean manually using the sum of MPG and the number of entries. # This should be equal to the mean statement above sum(mtcars$mpg) / length(mtcars$mpg) ## [1] 20.09062 Descriptive Plots We can help describe our data with the plotting functionality of R. Box plots (sometimes box and whisker plots) are helpful for graphing the descriptive stats of a sample, including: minimum, maximum, median, quartile distribution, and inter-quartile range. # A boxplot can help tell us about the descriptive stats of a sample. boxplot(mtcars$mpg) This graphic is not ready to present to someone without titles and labels however. # A boxplot can help tell us about the descriptive stats of a sample. boxplot(mtcars$mpg, xlab = &quot;mtcars Sample&quot;, ylab = &quot;MPB&quot;, main = &quot;Distribution of Fuel Economy in mtcars&quot;) More advanced graphics can be made comparing data that we have in our sample. In this next example, we can examine the mpg of cars based on how many cylinders are in their engines. Based on the plot, we have reason to believe that there is a real difference in MPG based on how many cylinders are in an engine. # A boxplot can help tell us about the descriptive stats of a sample, based on what group it is in. # the `~` denotes that we want to look at mpg, based on the value in `cyl` boxplot(mtcars$mpg~mtcars$cyl, xlab = &quot;Number of Cylinders in Engine&quot;, ylab = &quot;MPG&quot;, main = &quot;Distribution of Fuel Economy by Engine Composition&quot;) We can also plot histograms to examine the distributions within our samples. # A histogram, plotting frequency of response hist(mtcars$mpg, main = &quot;Histogram of mtcars MPG&quot;, xlab = &quot;Reported Miles per Gallon&quot; ) All of the plots so far have used the native functionality of R. To make higher-quality, or just different, graphs, we will need to load a new library. The package ggplot2 is the graphics workhorse behind most of the publication-ready plots rendered in R. Note that it uses many more arguments to create a graph, but that this can produce far more dynamic graphs. As we just saw, R is not great at creating bar charts by default. We can add the package ggplot2 to create a new type of graph. # Load the prerequisite library library(ggplot2) ggplot(mtcars, mapping = aes(x = as.factor(cyl))) + geom_bar() + labs(x = &quot;Engine Cylinders&quot;, y = &quot;Number of Automobiles Recorded&quot;, title = &quot;Cylinders in Automobile Engines&quot;, # The Bolded Graph Title subtitle = &quot;Bar Chart of the Engine Atributes of Vehicles Sampled&quot; # The Graph Subtitle ) + theme(plot.title = element_text(hjust = 0.5), # centers the title plot.subtitle = element_text(hjust = 0.5), # centers the subtitle panel.background = element_blank(), # Removes greyscale background axis.line = element_line() # Adds black line border to x and y axis ) We can also create different styles of scatter charts using ggplot2. # Load the prerequisite library library(ggplot2) ggplot(mtcars, mapping = aes(x = hp, y = mpg)) + geom_point() + labs(x = &quot;Horsepower&quot;, # x axis y = &quot;Miles per Gallon&quot;, # y axis title = &quot;Fuel Economy and Performance&quot;, # The Bolded Graph Title subtitle = &quot;Scatterplot of Fuel Efficiency Compared to Engine Performance &quot; # The Graph Subtitle ) + theme(plot.title = element_text(hjust = 0.5), # centers the title plot.subtitle = element_text(hjust = 0.5), # centers the subtitle panel.background = element_blank(), # Removes greyscale background axis.line = element_line() # Adds black line border to x and y axis ) We can expand on ggplot with another package, ggpubr, which is designed to help with publication-ready graphics made using `ggplot2. In this case, we can enhance our scatter plot to now display the correlation as well. # Load the prerequisite library library(ggplot2) library(ggpubr) ggscatter(mtcars, &quot;hp&quot;, &quot;mpg&quot;, title = &quot;Correlation Plot of Fuel Economy\\nby Engine Performance&quot;, xlab = &quot;Horsepower&quot;, ylab = &quot;Miles per Gallon&quot;, add = &quot;reg.line&quot;, # Draw a regression line conf.int = T, # Adds a confidence interval cor.coef = T # Adds the Correlation ) + theme(plot.title = element_text(hjust = 0.5), # centers the title plot.subtitle = element_text(hjust = 0.5), # centers the subtitle panel.background = element_blank(), # Removes greyscale background axis.line = element_line() # Adds black line border to x and y axis ) Statistical Analysis and Tests The main strength of R is in the ability to quickly perform statistical analysis on our data, and generate summary or descriptive statistics. We can use the table() function to make a contingency table to quickly count the number of responses in our data. # Make a table of responses. # This will count the number of times each response was selected. # In this case, we can quickly count how many cars were sampled from each engine type. table(mtcars$cyl) We can also generate descriptive statistics about data using another package, Hmisc. # Install the prerequisite package install.packages(&quot;Hmisc&quot;) The describe() function will generate descriptive statistics about data that we have collected. # Load the prerequisite library library(Hmisc) describe(mtcars$cyl) Goals At the end of the Lab, we have learned: What R and RStudio are and are not How to download, install, and run R and RStudio How to install and load new R packages How to start performing math operations in R How to start graphing data in R "],["data.html", "Working with Data Goals What Data Formats can R Use? Getting our Data Table Ready to Use in R What format is our Data? Where is our Data Located? Loading our Data Table into R Assigning Data to Objects in R Different Types of Data In R Different Types of Data In R Viewing Data in R", " Working with Data Goals By the end of the Lab, we will have learned: How to load data from a variety of local formats How to load data from a remote source How to identify common types of data inside of R How to add, remove, sort, and filter the data How to save data to a variety of local formats What Data Formats can R Use? R is a powerful tool for working with data in a variety of file formats. Most likely, we will be using data that are available as a table, such as an Excel spreadsheet (or similar Google Sheet, LibreOffice, etc), or a Comma Separated Values (csv). We may also need to use data available from a networked source, such as a web site, API, or other file hosting service. R, and its supporting packages can load, and help to convert, many types of data. Common data formats and their prerequisite package are listed below: Base R supports reading data from plain text files (.txt) and comma-separated tables (.csv), and compressed RData files openxlsx supports Excel (.xls, .xlsx) foreign supports SAS, SPSS, and dBase (.dbf) RCurl supports URL, HTTP, FTP jsonlite supports JSON shapefiles supports ESRI shapefiles (.shp, .shx, .dbf) Getting our Data Table Ready to Use in R During the internship, most of our data will be collected ourselves, or provided by our organizations. When reading our data into R, there are some guidelines that we should adhere to. Table Headers The first row of your data table Names should start with a character Names must be unique, or will be iterated Names should be descriptive or unique IDs Names should avoid iterative counting (Q1, Q2, Q3, …) Table Contents Every row after the first is read as your data Remove any test data, total rows, or metadata before importing Remove empty rows, columns, and table formatting Any missing cell becomes a value of NA What format is our Data? What file type is our data stored in? Before R can read data, we need to determine what file format the data are in, so that we can use the correct package and function. In order to reliably read in data, we will follow these steps. Identify the file type from the file extension. You may need to turn file extensions on in your file explorer (Windows Explorer, Finder, etc) Check the list of installed packages in R, or CRAN, for a package that can read the file format, or install any new packages that can read that file format, if missing Load the required package(s) using library() Where is our Data Located? Where are the data saved to? Before R can read data, we need to determine where the file is located, so that we can refer to the correct file location. Data can be on local, removable, or networked locations. In order to reliably read in data, we will follow these steps. Files should be kept in a permanent location whenever possible Ideally, we will use a relative file path, inside the project: (\"./my_folder/my_file\") We can also use an absolute file path, within the local file system: (\"C:/Users/my_user/my_folder/my_file\") on Windows or (\"/home/my_user/my_folder/my_file\") on Mac, Linux, ChromeOS We can use a URL path, for data available on a networked file system: (\"https://www.MyWebsite.com/myPage/my_file.csv\") Loading our Data Table into R Once we have identified the file format and location, we can read data into R. We can now load the required package(s), and read in the data. # This code segment is an example of how to read different data file formats into R. # For a CSV file: read.csv(&quot;./Data/my_file.csv&quot;) # For an Excel file, we need an additional package: library(openxlsx) read.xlsx(&quot;./Data/my_file.xlsx&quot;, sheet = 1) # For an RData object load(&quot;./Data/my_data.Rdata&quot;) Assigning Data to Objects in R R can store any form of data as an object within the R environment. R objects will most frequently be stored in the global environment. Objects are assigned using the assignment operators: = or &lt;-. Both operators will generally behave the same. # Object assignment is a critical skill for object-oriented languages like R. # Whenever we are assigning an object, we always write: # object is equal to value # Assignment using the = operator my_csv = read.csv(&quot;./Data/my_file.csv&quot;) # Assognment using the left assign operator my_xlsx &lt;- read_excel(&quot;./Data/my_file.xlsx&quot;) Different Types of Data In R Now that we have some data read into R, we can talk about the different types of data inside of R. All objects inside of R will be of a specific class. Common data class are listed below. Data Frame: A 2-dimensional table, storing multiple types of data List: A 1-dimensional list, storing multiple types of data Vector: A 1-dimensional list, storing only data of the same type Different Types of Data In R All objects inside of R will be of a specific type. Common data types are listed below. # Vectors of different types of data Numeric = c(.5, 1, 1.5) Integer = c(1, 2, 3) Character = c(&quot;Anything in Quotes&quot;, &quot;1&quot;) Logical = c(TRUE, FALSE, T, F) Factor = c(&quot;Strongly Disagree&quot;, &quot;Disagree&quot;, &quot;Agree&quot;, &quot;Strongly Agree&quot;) Viewing Data in R Any object can be viewed by referencing it in the R terminal. For example: mtcars will print the mtcars data frame inside of the console. The View() function is used to display objects in a separate tab. If using View() inside of R, you will receive a new pop-up window with your requested object. If using View() inside of RStudio, you will receive a new tab within your RStudio session. For example: View(mtcars) will open the data frame inside of a new tab. We will be using the mtcars data set in this presentation. Note that View() is one of the few functions in R that begins with capitalization. "],["data-lab.html", "Data Lab Example Data Set mtcars Referencing Different Data in R Logical Operators Sorting Data Frames in R Sorted Data Example Ordering Data Frames in R Sorted and Reordered Data Example Adding New Vectors to Data Data with New Vectors Example Selecting Specific Vectors of Data Data with Select Vectors Example Save our New Data Goals", " Data Lab Example Data Set mtcars Like in the introduction lab, we will be using the mtcars data set to learn how to process data in R. Below is an excerpt of mtcars, displaying the first 6 cars in the list. The columns have been renamed, and some columns have been removed for ease of presentation. Table 2: Sample of the mtcars data set Make and Model Miles per Gallon Number of Cylinders Displacement in Cubic Inches Gross Horsepower Mazda RX4 21.0 6 160 110 Mazda RX4 Wag 21.0 6 160 110 Datsun 710 22.8 4 108 93 Hornet 4 Drive 21.4 6 258 110 Hornet Sportabout 18.7 8 360 175 Referencing Different Data in R How can we reference our data, once is it loaded? We can reference an object by name, to reference the entire data frame. By default, calling an object will print the contents to the console. # The object name is used to reference the entire object mtcars Vectors can be their own object; however, we most frequently encounter vectors as the columns of a data frame. Named vectors are used to reference a sub-set of an object. We can reference a vector that is part of a data frame using the vector operator $. # The vector name is used to reference the vector within an object mtcars$mpg Numbered indexes are used to reference a sub-set of an object, either a data frame or a vector. We can reference an index position using the index operator [] # Reference the first entry of the vector mpg, of the data frame mtcars mtcars$mpg[1] # Reference the first row and second column of the data frame mtcars mtcars[1, 2] # Reference the entire first row mtcars[1,] # Reference the entire first column mtcars[,1] # This is functionally identical to using the vector reference for the first column, `mpg` mtcars$mpg # If no index or filter is provided, all values are referenced mtcars[,] # This is functionally identical to using the object reference mtcars Being able to reference data is a prerequisite skill to being able to sort or filter data. It is additionally a prerequisite for most graphics and statistical tasks in R. Logical Operators Data frames can be sorted by their contents, typically by searching for given values within a specified column using logical operators. The sorting requires at least one specified vector and one desired value. # Logical Operators in R # Less Than 10 &lt; 5 # Greater Than 10 &gt; 5 # Is Equal To 1/2 == .5 # Is Not Equal To pi != 3 # In 5 %in% c(1, 2, 3, 4) # And pi &gt; 3 &amp; pi &lt; 4 # Or pi &gt; 3 | pi == 3 Sorting Data Frames in R The most reliable way to reference and sort or filter data in R is by using vectors and indexes. We can use these references to filter data by values in given columns, using logical operators. We will be combining vector references ($), index references ([]), and logical operators to filter our data. The following example filters our data based on one value in one vector. # The vector `am` describes if a car has an automatic (0) or manual (1) transmission # The index reference is sorted as [rows, columns] # This segment is asking for a subset of mtcars; we want all rows of mtcars where am == 1 # This will return a data frame of only manual cars mtcars[mtcars$am == 1,] # We can assign this filtered data frame to a new object to save our filtered data for reference later mt_manual = mtcars[mtcars$am == 1,] The following example filters our data based on multiple values in one vector. # The vector `cyl` describes the number of cylinders in an engine # The index reference is sorted as [rows, columns] # mtcars observed cars that have either 4, 6, or 8 cylinders # This segment is asking for a subset of mtcars; we want # This will return a data frame of cars with 4 or 6 cylinders mtcars[mtcars$cyl %in% c(4, 6),] # We can assign this filtered data frame to a new object to save our filtered data for reference later mt_46cyl = mtcars[mtcars$cyl %in% c(4, 6),] # Because we know that the response must be either 4, 6, or 8: # we could also filter for all rows of mtcars where the cars do not have 8 cylinders mtcars[mtcars$cyl != 8,] mt_not8cyl = mtcars[mtcars$cyl != 8,] Additional logical operators can be used in this index sorting method to make more complex filters. # We can use logical operators to make a filter where either condition may be met, using `or` logic. # This will filter a data frame where: # - cars are manual, or # - cars have 4 or 6 cylinders mtcars[mtcars$am == 1 | mtcars$cyl %in% c(4, 6),] filter1 = mtcars[mtcars$am == 1 | mtcars$cyl %in% c(4, 6),] # We can use logical operators to make a filter where both conditions must be met, using `and` logic. # This will filter a data frame where: # - cars are manual, and # - cars have 4 or 6 cylinders mtcars[mtcars$am == 1 &amp; mtcars$cyl %in% c(4, 6),] filter2 = mtcars[mtcars$am == 1 &amp; mtcars$cyl %in% c(4, 6),] We can check how many responses are returned in these filtered data frames to see the effects of our filters. # We can use logical operators to make a filter where either condition may be met, using `or` logic. # This will filter a data frame where: # - cars are manual, or # - cars have 4 or 6 cylinders # The nrow() function will tell us how many rows of data fit this filter nrow(mtcars[mtcars$am == 1 | mtcars$cyl %in% c(4, 6),]) # or nrow(filter1) # We can use logical operators to make a filter where both conditions must be met, using `and` logic. # This will filter a data frame where: # - cars are manual, and # - cars have 4 or 6 cylinders # The nrow() function will tell us how many rows of data fit this filter nrow(mtcars[mtcars$am == 1 &amp; mtcars$cyl %in% c(4, 6),]) # or nrow(filter2) Sorted Data Example The following table is an example of the first six rows of cars that match the filter of: manual cars with four or six cylinders. Table 3: First Six cars from mtcars Data Set, with 4 or 6 cylinders and manual transmission. mtcars[mtcars$am == 1 &amp; mtcars$cyl %in% c(4, 6),] mpg cyl disp hp drat wt qsec vs am gear carb 21.0 6 160.0 110 3.90 2.620 16.46 0 1 4 4 21.0 6 160.0 110 3.90 2.875 17.02 0 1 4 4 22.8 4 108.0 93 3.85 2.320 18.61 1 1 4 1 32.4 4 78.7 66 4.08 2.200 19.47 1 1 4 1 30.4 4 75.7 52 4.93 1.615 18.52 1 1 4 2 33.9 4 71.1 65 4.22 1.835 19.90 1 1 4 1 Ordering Data Frames in R Data frames can be ordered by their contents, by reordering the data based on ascending / descending values of one vector. # To sort a data frame of highest to lowest values of `mpg`: mtcars[order(mtcars$mpg, decreasing = T),] Sorted and Reordered Data Example Table 4: Top Six cars from mtcars Data Set by fuel economy, with 4 or 6 cylinders and manual transmission. mpg cyl disp hp drat wt qsec vs am gear carb 33.9 4 71.1 65 4.22 1.835 19.90 1 1 4 1 32.4 4 78.7 66 4.08 2.200 19.47 1 1 4 1 30.4 4 75.7 52 4.93 1.615 18.52 1 1 4 2 30.4 4 95.1 113 3.77 1.513 16.90 1 1 5 2 27.3 4 79.0 66 4.08 1.935 18.90 1 1 4 1 26.0 4 120.3 91 4.43 2.140 16.70 0 1 5 2 Adding New Vectors to Data Lists and Data frames store data in vectors. A Data frame is practically just a list of vectors. # New vectors can be added to an object by assigning a value to a `vectorized` reference, using the vector operator `$`: # In this case, since we know that the rows of this data contain the names of the vehicles, we can add the names to a new column mtcars$model = rownames(mtcars) # A constant value can be applied to all rows using vectorized reference: mtcars$axle = 2 # A formula can be applied to all rows using vectorized reference: # This is the approximate conversion formula to convert mpg to kpl mtcars$kpl = mtcars$mpg * .354 Data with New Vectors Example Table 5: Top Six cars from mtcars Data Set, with Kilometers per Liter and Number of Axles added. mpg cyl disp hp drat wt qsec vs am gear carb kpl axle 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 7.43 2 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 7.43 2 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 8.07 2 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 7.58 2 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 6.62 2 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 6.41 2 Selecting Specific Vectors of Data Data frames can be manipulated easier using the dplyr package. This package offers support for manipulating data frame objects, and easily filtering columns of data. # Lets start by installing the new package. install.packages(&quot;dplyr&quot;) library(dplyr) # Data frames can be reduced using the `select` function: # The first argument is the name of our data frame, # The following arguments are all of the columns that we want to keep. # This function will create a copy of mtcars, with only some of the columns present. some_mtcars = select(mtcars, model, kpl, cyl, hp, axle) Data with Select Vectors Example Table 6: Top Six cars from mtcars Data Set, with Kilometers per Liter and Number of Axles added, and other columns removed. model kpl cyl hp axle Mazda RX4 7.43 6 110 2 Mazda RX4 Wag 7.43 6 110 2 Datsun 710 8.07 4 93 2 Hornet 4 Drive 7.58 6 110 2 Hornet Sportabout 6.62 8 175 2 Valiant 6.41 6 105 2 Save our New Data Data can be written back out from R into files, which can be loaded at a later time, or used in other software. Data can be written to a variety of file types, and does not need to return to its original format. The save() function creates a binarized file that only R can read, but is very fast, space efficient, and can have non-normal-shaped data. Other functions will write data out to more conventional file formats, such as .csv, .xls/x, .dbf, etc. # If we are happy with data that we have created, and would like to save it for later use, we can write the data to our disk. # This can also be a convenient way to convert file types, save remote data, or just quickly code and sort data for use outside R. # To take a table of data and write to a csv: write.csv(mtcars, file = &quot;./mtcars.csv&quot;) # To take a table of data and write to an excel file: write.xlsx(mtcars, file = &quot;./mtcars.xlsx&quot;) # To take any R Data object in our environemnt viewer and save it for later: save(mtcars, file = &quot;./mtcars.RData&quot;) Goals At the end of the Lab, we have learned: How to load data from a variety of local formats How to load data from a remote source How to identify common types of data inside of R How to add, remove, sort, and filter the data How to save data to a variety of local formats "],["graphs.html", "Graphs in R Goals Recommended Package Preparing the recommended packages Organizing Data for Graphing", " Graphs in R Goals By the end of the Lab, we will have learned: How to organize data for ease of graphing How to generate graphs for descriptive statistics How to add additional detail to graphs How to save and export graphics Recommended Package R natively supports the creation of basic graphics. Additional packages allow for the creation of more advanced and presentation-ready graphics. We can use install.packages() to download or update these packages. Please note that the base package is installed and loaded into each R session by default. We can use the following graphical packages to help present our data: base, for creating statistical graphics ggplot2, for creating more advanced or aesthetic graphics ggpubr, a supplement for ggplot2 for publication-ready graphs tmap, for creation of GIS maps numform, for displaying publication-ready data Preparing the recommended packages For the lab, we will be using, and will need to install, ggplot2 and ggpubr. As a reminder, we will use the install.packages() function to download these packages. Once downloaded, use library() to load required packages into R. base is always loaded by R at start-up. We can check what packages are loaded using the function: loadedNamespaces() # If we have not already done so, we can download and install the new R packages install.packages(&quot;ggplot2&quot;) install.packages(&quot;ggpubr&quot;) # Once downloaded, we will load the packages library(ggplot2) library(ggpubr) # We can check to see what packages are loaded loadedNamespaces() Organizing Data for Graphing Like most functions in R, graphing is performed using vectors of data. We talked about referencing vectors of data inside the Data Lab. Much like the requirements and best practices for loading data into R, a check-list for graph-ready data is organized below. When making graphs, we will have the best and most reliable results when the following conditions are met: Data are stored in a singular data frame (table) We are able to sort or filter our data based on a given value Columns (vectors) represent different variables or attributes of our data Rows represent different observations, cases, responses, etc. "],["graph-lab.html", "Graphing Lab Example Data Set mtcars Scatter plots - base Scatter plots - ggplot2 Linear Regression - base Linear Regression - ggpubr Boxplots - base Boxplots - ggpubr Histograms - base Bar Charts - ggplot2 Bar Charts, Sorted - ggplot2 Saving Graphics - Working Directories Saving Graphics - base Saving Graphics - ggplot2 Goals", " Graphing Lab Example Data Set mtcars Like in the introduction lab, we will be using the mtcars data set to learn how to graph data in R. Below is an excerpt of mtcars, displaying the first 6 cars in the list. The columns have been renamed, and some columns have been removed for ease of presentation. Table 7: Top Six Fuel Efficient 4-Cylinder Engines Make and Model Miles per Gallon Number of Cylinders Displacement in Cubic Inches Gross Horsepower Toyota Corolla 33.9 4 71.1 65 Fiat 128 32.4 4 78.7 66 Honda Civic 30.4 4 75.7 52 Lotus Europa 30.4 4 95.1 113 Fiat X1-9 27.3 4 79.0 66 Porsche 914-2 26.0 4 120.3 91 Scatter plots - base This first example uses the base plotting functions of R. When making our plots, we will typically be referring to vectors of data within a data frame. We can start by making the most simple plot using one vector. This plot will us all of the values within the vector mpg, in the order of their appearance in the vector (from top to bottom in the data frame). # A scatter plot of all of the values of mtcars$mpg plot(mtcars$mpg) While potentially interesting, there is little value to plotting data this way. Our plots are improved by adding an additional axis for comparison. In this case, we can observe a scatter plot using mpg as our y axis and hpas our x axis. In R, we will use the ~ character to look at the values in one vector by the values of another vector. This scatter plot will plot the mpg of each car based on its reported horsepower. Making graphs such as these can be helpful for generating and testing hypotheses about our data, and are useful in exploratory data analysis. # A scatter plot of all of the values of mtcars$mpg by their values in mtcars$hp plot(mtcars$mpg~mtcars$hp) Based on this graph, it looks like there is a possible relationship between a cars mpg and its horsepower! We can add proper axis labels and a title to make this graph more presentable to our team or host site. # A scatter plot of all of the values of mtcars$mpg by their values in mtcars$hp # This version has axis labels and a title plot(mtcars$mpg~mtcars$hp, main = &quot;MPG and HP Scatter Plot&quot;, xlab = &quot;Horsepower&quot;, ylab = &quot;Miles per Gallon&quot; ) Scatter plots - ggplot2 This next example uses the plotting functions of ggplot2. It has some notable advantages over using the base plotting functions; however, the function will be written differently to functions we have used so far. We will start by remaking the scatter plot of mpg and horsepower. Note that, instead of using a vector reference (using the vector operator $), we are using the actual names of the columns inside of the data frame mtcars. When plotting our data, we should keep our data inside one data frame whenever possible. Also note, the + operator at the end of the first line of code, and the indentation at the second line. This indicates to R that there is more instruction coming, and that R should interpret these lines of code together. # A scatter plot of all of the values of mtcars$mpg by their values in mtcars$hp ggplot(mtcars, mapping = aes(x = hp, y = mpg)) + geom_point() Just like before, it looks like there is a possible relationship between a cars mpg and its horsepower. We can add proper axis labels, a title, and a subtitle to make this graph more presentable to our team or host site. Using ggplot2, we have a lot more control over our graph generation, and can add additional labels or design themes to our graphs. However, this increased control has made our function more complex. # A scatter plot of all of the values of mtcars$mpg by their values in mtcars$hp # This version has axis labels, a title, a subtitle, and optional formatting for each ggplot(mtcars, mapping = aes(x = hp, y = mpg)) + geom_point() + labs(x = &quot;Horsepower&quot;, # x axis label y = &quot;Miles per Gallon&quot;, # y axis label title = &quot;Fuel Economy and Performance&quot;, # The Bolded Graph Title subtitle = &quot;Scatterplot of Fuel Efficiency Compared to Engine Performance &quot; # The Graph Subtitle ) + theme(plot.title = element_text(hjust = 0.5), # centers the title plot.subtitle = element_text(hjust = 0.5), # centers the subtitle panel.background = element_blank(), # Removes greyscale background axis.line = element_line() # Adds black line border to x and y axis ) Linear Regression - base After making scatter plots, we can begin to look at linear regression and correlation plots. Since we have suspected a linear relationship (i.e., not exponential), we can try to plot this relationship, and using the base R functions we can add this detail to our graph to begin to expand on our analysis and presentation of data. # A scatter plot of all of the values of mtcars$mpg by their values in mtcars$hp # With the linear relationship of mpg by hp plot(mtcars$mpg~mtcars$hp) abline(lm(mtcars$mpg~mtcars$hp)) Based on this graph, we can see pretty strong evidence for a linear relationship. Just as before, we will now add our labels to get this graph ready to present. # A scatter plot of all of the values of mtcars$mpg by their values in mtcars$hp # With the linear relationship of mpg by hp # With labels plot(mtcars$mpg~mtcars$hp, main = &quot;Simple Linear Regression of MPG~HP&quot;, xlab = &quot;Horsepower&quot;, ylab = &quot;Miles per Gallon&quot; ) abline(lm(mtcars$mpg~mtcars$hp)) Linear Regression - ggpubr This next example uses the plotting functions of ggppubr. Just as before, it has some notable advantages over using the base plotting functions; however, the function will be written differently to functions we have used so far. ggpubr functions are written very similarly to ggplot2 functions, and the packages are designed to be inter-operable. We will start by remaking the scatter plot of mpg and horsepower, with the linear regression line. # A scatter plot of all of the values of mtcars$mpg by their values in mtcars$hp # With the linear relationship of mpg by hp ggscatter(mtcars, &quot;hp&quot;, &quot;mpg&quot;, add = &quot;reg.line&quot; ) If we compare this graph to the previous one, the regression line should be the same. Now we can add our axis labels and title. The ggpubr package also lets us add some additional features to our graph, to make it much more informative and presentation-ready. # A scatter plot of all of the values of mtcars$mpg by their values in mtcars$hp # With the linear relationship of mpg by hp # With labels, confidence interval, and correlation coefficient ggscatter(mtcars, &quot;hp&quot;, # x axis data &quot;mpg&quot;, # y axis data title = &quot;Correlation Plot of Fuel Economy\\nby Engine Performance&quot;, # title xlab = &quot;Horsepower&quot;, # x axis label ylab = &quot;Miles per Gallon&quot;, # y axis label add = &quot;reg.line&quot;, # add the regression line conf.int = T, # add the confidence interval cor.coef = T # add the correlation coefficient ) + theme(plot.title = element_text(hjust = 0.5)) # centers the title) Boxplots - base Boxplots are helpful for graphing descriptive statistics about our data. A boxplot will show us: the minimum and maximum values, the first and third quartile, and the median (the second quartile). A boxplot of one vector will show us information about its distribution. # A boxplot of one vector, plotting simple descriptive statistics boxplot(mtcars$mpg) As before, our plot is improved by adding axis labels and a title. # A boxplot of one vector, plotting simple descriptive statistics # With labels boxplot(mtcars$mpg, main = &quot;Boxplot of Miles per Gallon&quot;, xlab = &quot;Vehicles in mtcars&quot;, ylab = &quot;Reported MPG&quot; ) Our plots are improved by adding an additional axis for comparison. In this case, we can observe a boxplot using mpg as our y axis and amas our x axis. In R, we will use the ~ character to look at the values in one vector by the values of another vector. This boxplot will plot the mpg of each car based on its reported transmission type. Making graphs such as these can be helpful for generating and testing hypotheses about our data, and are useful in exploratory data analysis. # A boxplot of two vectors, plotting simple descriptive statistics # With labels boxplot(mtcars$mpg~mtcars$am, main = &quot;Boxplot of Miles per Gallon by Transmission Type&quot;, xlab = &quot;Auto (0) or Manual (1) Transmission&quot;, ylab = &quot;Reported MPG&quot;, ) By default, our graph will use the values provided for our x axis labels, and make both box plots the same color. We can change the x axis labels and color-code the boxplots if desired. # A boxplot of two vectors, plotting simple descriptive statistics # With labels boxplot(mtcars$mpg~mtcars$am, main = &quot;Boxplot of Miles per Gallon by Transmission Type&quot;, xlab = &quot;Auto or Manual Transmission&quot;, ylab = &quot;Reported MPG&quot;, names = c(&quot;Auto&quot;, &quot;Manual&quot;), col = c(&quot;grey90&quot;, &quot;grey60&quot;) ) Based on the boxplots, we can assume that there may be a difference in reported mpg in vehicles based on their transmission type. Boxplots - ggpubr Just as before, ggpubr has some advantages over using the base plotting functions. In our first example we will recreate the boxplot of mpg and am. # A boxplot of two vectors, plotting simple descriptive statistics ggboxplot(mtcars, &quot;am&quot;, &quot;mpg&quot;) Just as before, after having made the boxplot, we can add our labels and additional styling details. Note that with the ggpubr plot, we can add additional detail to the boxplot, such as plotting the mean value; this can be helpful for exploring differences in means across groups, which is a common feature of statistical analysis. # A boxplot of two vectors, plotting simple descriptive statistics # With labels ggboxplot(mtcars, # data frame &quot;am&quot;, # x axis data &quot;mpg&quot;, # y axis data fill = &quot;grey&quot;, # 1-3 quartile fill color, with one color for both boxplots add = &quot;mean&quot;, # add the mean as a dot, in relation to the median title = &quot;Boxplot of Fuel Economy by Transmission Type&quot;, # title xlab = &quot;Auto or Manual Transmission&quot;, # x axis label ylab = &quot;Reported Miles per Gallon&quot; # y axis label ) + scale_x_discrete(labels = c(&quot;Automatic&quot;, &quot;Manual&quot;)) + # x axis scale labels theme(plot.title = element_text(hjust = 0.5)) # centers the title) ggplot2 and ggpubr allow for a mot more versatile themes to be used in graphing. For example, we could color-code the columns of our boxplots using the fill argument. We can also note here in this example, that when there are outliers present, R will mark those outliers. # A boxplot of two vectors, plotting simple descriptive statistics # With labels ggboxplot(mtcars, # data frame &quot;cyl&quot;, # x axis data &quot;mpg&quot;, # y axis data fill = c(&quot;grey90&quot;, &quot;grey60&quot;, &quot;grey30&quot;), # 1-3 quartile fill color, with a different color for each factor add = &quot;mean&quot;, # add the mean as a dot, in relation to the median title = &quot;Boxplot of Fuel Economy by Transmission Type&quot;, # title xlab = &quot;Number of Cylinders in Engine&quot;, # x axis label ylab = &quot;Reported Miles per Gallon&quot; # y axis label ) + scale_x_discrete(labels = c(&quot;4 Cylinders&quot;, &quot;6 Cylinders&quot;, &quot;8 Cylinders&quot;)) + # x axis scale labels theme(plot.title = element_text(hjust = 0.5)) # centers the title) As we can see, there are benefits to choosing to plot our data using both the base and the additional functionality. There is no single solution for plotting descriptive statistics, and you should consider your target audience when creating each graph. Histograms - base A histogram is an approximate representation of the distribution of numerical data, and is typically a prerequisite for further statistical analysis. Histograms can help to identify if the data we are working with are normally distributed (following a bell curve distribution). This information will inform what statistical tests are appropriate, and will demonstrate if our data are skewed. # A histogram of one vector hist(mtcars$mpg) Once we are ready to share our histogram, we can add our own labels. Note that by default, the histogram comes with a title and axis labels referring to the data selected. # A histogram with one vector # With custom labels hist(mtcars$mpg, main = &quot;Histogram of mtcars MPG&quot;, xlab = &quot;Reported Miles per Gallon&quot; ) Bar Charts - ggplot2 R excels at graphing statistical graphs; however by default, it is weak at plotting descriptive graphs, such as bar charts. Bar charts are more commonly used to present the number of observations across certain categories within our data. These plots are helpful for quickly presenting survey responses, demographic data, or other categorical responses. We can start by plotting the engine cylinders. # A bar chart of one vector ggplot(mtcars, mapping = aes(x = cyl)) + geom_bar() We may notice that we have extra undesired number labels on our x axis. This is because the vector cyl is numeric, and R is treating the data as if it were a number, and not a category. We can address this using a new family of functions: the as. family. In the next example we can ask R to treat the vector cyl as if it is a factor, instead of as a number. This function is helpful because it does not permanently change our data; R will only treat this vector as a function for the purposes of this one graph. We can also use this now-categorical value to color-code our columns for us. # A bar chart of one vector # With categorical values # With color-coded categories ggplot(mtcars, mapping = aes(x = as.factor(cyl), fill = as.factor(cyl))) + geom_bar() Now we see we have the same graph, but R is now correctly treating our cyl values as a category instead of as a numeric value. Now that we are using categories as we intended, we can add our labels and other formatting. # A bar chart of one vector # With categorical values # With color-coded categories # With legend turned off, because we have renamed our values ggplot(mtcars, mapping = aes(x = as.factor(cyl), fill = as.factor(cyl))) + geom_bar(show.legend = F) + # Turn off the legend labs(x = &quot;Engine Cylinders&quot;, y = &quot;Number of Automobiles Recorded&quot;, title = &quot;Cylinders in Automobile Engines&quot;, # The Bolded Graph Title subtitle = &quot;Bar Chart of the Engine Atributes of Vehicles Sampled&quot; # The Graph Subtitle ) + scale_x_discrete(labels = c(&quot;4 Cylinders&quot;, &quot;6 Cylinders&quot;, &quot;8 Cylinders&quot;)) + # x axis scale labels theme(plot.title = element_text(hjust = 0.5), # centers the title plot.subtitle = element_text(hjust = 0.5), # centers the subtitle panel.background = element_blank(), # Removes greyscale background axis.line = element_line() # Adds black line border to x and y axis ) Bar Charts, Sorted - ggplot2 Looking back to our data lab, we can also quickly supply sorted data to generate plots. We can do this by either: a) sorting our data and assigning it to a new object, or b) applying the filters within our function. This first graph will use an already sorted data frame. # We make two new data frames, sorted by the values of am, Automatic or Manual mtcars_a = mtcars[mtcars$am==0,] # All Automatic Cars mtcars_m = mtcars[mtcars$am==1,] # All Manual Cars # We graph the data using an already sorted data frame ggplot(mtcars_m, mapping = aes(x = as.factor(cyl))) + geom_bar() This second graph will use a filter inside of the function. # Alternatively, we could also provide the filter inside the ggplot function ggplot(mtcars[mtcars$am == 1,], mapping = aes(x = as.factor(cyl))) + geom_bar() Note that the graphs are identical. As discussed, there are usually multiple paths that you can take to arrive at the same result when programming. It is important that you pick the path that provides the results that you want the easiest, or most consistently. Now, we can finish labeling, and coloring our graph as desired. This graph will be in a manually-defined greyscale. # A bar chart of one vector # With categorical values # With color-coded categories ggplot(mtcars[mtcars$am == 1,], mapping = aes(x = as.factor(cyl))) + geom_bar(fill = c(&quot;grey90&quot;, &quot;grey60&quot;, &quot;grey30&quot;)) + # Custom Fill Colors labs(x = &quot;Engine Cylinders&quot;, y = &quot;Number of Automobiles Recorded&quot;, title = &quot;Cylinders in Automobile Engines&quot;, # The Bolded Graph Title subtitle = &quot;Bar Chart of the Engine Atributes of Cars with Manual Transmission&quot; # The Graph Subtitle ) + scale_x_discrete(labels = c(&quot;4 Cylinder,\\nManual Transmission&quot;, &quot;6 Cylinder,\\nManual Transmission&quot;, &quot;8 Cylinder,\\nManual Transmission&quot;)) + # x axis scale labels theme(plot.title = element_text(hjust = 0.5), # centers the title plot.subtitle = element_text(hjust = 0.5), # centers the subtitle panel.background = element_blank(), # Removes greyscale background axis.line = element_line() # Adds black line border to x and y axis ) Now that we have some sorted graphs that we like, we can also start to arrange the graphs together, for ease of presentation. This is a feature of ggplot2, and will work for all of the graphs made using the gg family, such as those using ggpubr. # First we will start by generating our graphs, and assigning the graph to an object so we can reference the graph later. # Assign the automatic filter graph to an object cyl_auto = ggplot(mtcars[mtcars$am == 0,], mapping = aes(x = as.factor(cyl))) + geom_bar(fill = c(&quot;grey90&quot;, &quot;grey60&quot;, &quot;grey30&quot;)) + # Custom Fill Colors labs(x = &quot;Engine Cylinders&quot;, y = &quot;Automobiles Recorded&quot;, title = &quot;Cylinders in Automobile Engines&quot;, # The Bolded Graph Title subtitle = &quot;Engine Atributes of Cars with\\nAutomatic Transmission&quot; # The Graph Subtitle ) + scale_x_discrete(labels = c(&quot;4 Cylinder,\\nAutomatic&quot;, &quot;6 Cylinder,\\nAutomatic&quot;, &quot;8 Cylinder,\\nAutomatic&quot;)) + # x axis scale labels theme(plot.title = element_text(hjust = 0.5), # centers the title plot.subtitle = element_text(hjust = 0.5), # centers the subtitle panel.background = element_blank(), # Removes greyscale background axis.line = element_line() # Adds black line border to x and y axis ) # Assign the manual filter graph to an object cyl_man = ggplot(mtcars[mtcars$am == 1,], mapping = aes(x = as.factor(cyl))) + geom_bar(fill = c(&quot;grey90&quot;, &quot;grey60&quot;, &quot;grey30&quot;)) + # Custom Fill Colors labs(x = &quot;Engine Cylinders&quot;, y = &quot;Automobiles Recorded&quot;, title = &quot;Cylinders in Automobile Engines&quot;, # The Bolded Graph Title subtitle = &quot;Engine Atributes of Cars with\\nManual Transmission&quot; # The Graph Subtitle ) + scale_x_discrete(labels = c(&quot;4 Cylinder,\\nManual&quot;, &quot;6 Cylinder,\\nManual&quot;, &quot;8 Cylinder,\\nManual&quot;)) + # x axis scale labels theme(plot.title = element_text(hjust = 0.5), # centers the title plot.subtitle = element_text(hjust = 0.5), # centers the subtitle panel.background = element_blank(), # Removes greyscale background axis.line = element_line() # Adds black line border to x and y axis ) This first example will place our two graphs one on top of the other. # Arrange the provided graphs to have 1 column of graphs, and 2 rows ggarrange(cyl_auto, cyl_man, ncol = 1, nrow = 2) This second example will place our two graphs side by side. # Arrange the provided graphs to have 2 columns of graphs, and 1 row ggarrange(cyl_auto, cyl_man, ncol = 2, nrow = 1) Note that whenever making graphs with labels and text, we will have to provide the formatting ourselves, such as punctuation and new lines. You will want to review your graphs to make sure that there is no text overlap. Saving Graphics - Working Directories Now that we have made some graphics that we would like to share, we can learn how to save the graphs to our computer. The base method is a reliable way to save graphs that we have made. It should be compatible with saving any graphic generated; however, the most predictable results will occur with graphs made with the base package. As we will see, many graphing packages come with their own tools to save their graphs. Before we save a graph, we should know where we will be saving it to, by default. We can check where R is currently running from by asking for the current working directory. Windows users will have their working director at C:/Users/\"your user name\"/Documents by default. Mac, ChromeOS, and Linux users will have their working directory at /home/\"your user name\" by default. As the working directory is always a directory (folder), all files that we save will appear there by default. # Ask R where it currently is working from. # This will impact the files that we can access, and it helps us identify where our files will be getwd() ## [1] &quot;/home/css/Work/Projects/GreenTeamsRLab&quot; Saving Graphics - base The first way of saving graphs is using the headless method, where no graphs are actually drawn, and the graph is directly saved to your computer. “Headless” method, without any graphical output. This is the most reliable method for saving graphics. # The steps to save a graph without plotting it. jpeg(&quot;mtcars-hpXmpg.jpg&quot;) # Make a name for the file using a relative file path for the name. plot(mtcars$hp~mtcars$mpg) # Run the plotting function dev.off() # Turn off the graphics device, finishing the graphing process and saving the graph to the above location Desktop method, with graphical output. This is a more convenient, but potentially less reliable method for saving graphics. plot(mtcars$hp~mtcars$mpg) # Run the plotting function dev.copy(png, &quot;mtcars-hpXmpg.png&quot;) # Make a name for the file using a relative file path for the name. dev.off() # Turn off the graphics device, finishing the graphing process and saving the graph to the above location Saving Graphics - ggplot2 When we want to save a ggplot2 graph, we have an easier time of doing so, as the ggplot family of packages has a function specifically for saving our graphs. By default, the ggsave function will save a large, high quality, file that we can then easily add to a presentation or document. Note however that, as it is an image, it will not re-scale like Excel graphs will within our PowerPoints. We can however specify the height, width, and dpi of graphs that we want to save. “Headless” method, without any graphical output. # In one function we can provide the name as a relative file path, and the plot we would like to save, as either a function or plot object ggsave(&quot;scatterplot-hpXmpg.png&quot;, ggplot(mtcars, mapping = aes(x = hp, y = mpg)) + geom_point() ) Desktop method, with graphical output. # In one function we can provide the name as a relative file path, and the plot we would like to save, as either a function or plot object ggplot(mtcars, mapping = aes(x = hp, y = mpg)) + geom_point() ggsave(&quot;scatterplot-hpXmpg.png&quot;) Goals By the end of the Lab, we have learned: How to organize data for ease of graphing How to generate graphs for descriptive statistics How to add additional detail to graphs How to save and export graps "],["stats.html", "Statistics in R Goals Picking the Right Test Correlation - Motivation T Test - Motivation Chi-Square - Motivation Linear Model - Motivation ANOVA - Motivation", " Statistics in R Goals By the end of the Lab, we will have learned: How to pick a statistical test for your data How to run statistical tests in R How to interpret the results of statistical tests Picking the Right Test A critically important part of performing any statistical analysis is ensuring that we are using the right test for the job. Correlation - Motivation The Pearson’s product moment correlation test is used for testing for association between paired samples. The correlation test in R accepts two numeric vectors. Use cases for a correlation test include: Observational studies Natural experiments Single point of measurement T Test - Motivation The Two Sample T Test is used to compare the observed means across two different groups. T tests in R require either two numeric vectors, or one numeric and one categorical vector. Use cases for a t test include: Case / Control testing Pre / Post testing Case against known or hypothesized value Chi-Square - Motivation The Chi-Square test is used to compare categorical values, as row by column tables. The Chi-Square test in R requires two categorical values, or two values that can be coerced to a factor. Use cases for a Chi-Squared test include: Compare Population Proportions Test for independence Linear Model - Motivation The linear model describes a linear relationship between two or more variables, and may predict what values of one variable, Y, correspond to the values of another, X. Linear models in R require one numeric response variable, and at least one response variable, which is treated as categorical. Use cases for a linear model include: Identifying linear relationships Predicting unobserved outcomes of linear relationships based on rate of change ANOVA - Motivation The ANOVA Test is used to compare the observed means across three or more different groups. ANOVA tests in R require one numeric vector and one categorical vector. Use cases for an ANOVA test: Case / Case / Control testing Pre / Mid / Post testing Differences across multiple observed categorical groups "],["statistics-lab.html", "Statistics Lab Example Data Set mtcars Correlation Two Sample T Test - X by Y Two Sample T Test - X and Y One Sample T Test - X and estimated Y Chi-Square - Table Data Chi-Square - X and Y Chi-Square - Table Linear Model - Y by X Linear Model - Y by X + X Linear Model - Y by X + X + X:X ANOVA - X by Y ANOVA - Multiple Comparisons Goals", " Statistics Lab Example Data Set mtcars Like in the introduction lab, we will be using the mtcars data set to learn how to graph data in R. Below is an excerpt of mtcars, displaying the first 6 cars in the list. The columns have been renamed, and some columns have been removed for ease of presentation. Table 8: Top Six Fuel Efficient 4-Cylinder Engines Make and Model Miles per Gallon Number of Cylinders Displacement in Cubic Inches Gross Horsepower Toyota Corolla 33.9 4 71.1 65 Fiat 128 32.4 4 78.7 66 Honda Civic 30.4 4 75.7 52 Lotus Europa 30.4 4 95.1 113 Fiat X1-9 27.3 4 79.0 66 Porsche 914-2 26.0 4 120.3 91 Correlation cor.test(mtcars$hp, mtcars$mpg) ## ## Pearson&#39;s product-moment correlation ## ## data: mtcars$hp and mtcars$mpg ## t = -6.7424, df = 30, p-value = 1.788e-07 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## -0.8852686 -0.5860994 ## sample estimates: ## cor ## -0.7761684 This is a correlation test between horsepower and miles per gallon, from the mtcars data set. From this test, we see: p = 1.7878353^{-7} cor = -0.7761684 We can determine that there is a significant and strong negative correlation between horsepower and fuel economy. Two Sample T Test - X by Y t.test(mtcars$mpg ~ mtcars$am) ## ## Welch Two Sample t-test ## ## data: mtcars$mpg by mtcars$am ## t = -3.7671, df = 18.332, p-value = 0.001374 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -11.280194 -3.209684 ## sample estimates: ## mean in group 0 mean in group 1 ## 17.14737 24.39231 This is a t test comparing mean miles per gallon across cars grouped by transmission type, from the mtcars data set. From this test, we see: p = 0.0013736 mean of a = 17.1473684 mean of m = 24.3923077 We can determine that there is a significant difference between the mean mpg of cars, based on transmission type. Two Sample T Test - X and Y t.test(mtcars$mpg[mtcars$am==0], mtcars$mpg[mtcars$am==1]) ## ## Welch Two Sample t-test ## ## data: mtcars$mpg[mtcars$am == 0] and mtcars$mpg[mtcars$am == 1] ## t = -3.7671, df = 18.332, p-value = 0.001374 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -11.280194 -3.209684 ## sample estimates: ## mean of x mean of y ## 17.14737 24.39231 This is a t test comparing mean miles per gallon across cars grouped by transmission type, from the mtcars data set. From this test, we see: p = 0.0013736 mean of a = 17.1473684 mean of m = 24.3923077 We can determine that there is a significant difference between the mean mpg of cars, based on transmission type. One Sample T Test - X and estimated Y t.test(mtcars$mpg, mu = 20) ## ## One Sample t-test ## ## data: mtcars$mpg ## t = 0.08506, df = 31, p-value = 0.9328 ## alternative hypothesis: true mean is not equal to 20 ## 95 percent confidence interval: ## 17.91768 22.26357 ## sample estimates: ## mean of x ## 20.09062 This is a t test comparing mean miles per gallon, from the mtcars data set, compared to an estimated population mean. From this test, we see: p = 0.9327606 mean = 20.090625 mu (estimate) = 20 We can determine that there is not a significant difference between the mean mpg of cars, and our hypothesized mean. Chi-Square - Table Data table(mtcars$cyl, mtcars$am) 0 1 4 3 8 6 4 3 8 12 2 This is a row by column table, used to evaluate the chi-squared test. This table compares engine cylinders across cars grouped by transmission type, from the mtcars data set. For this Chi-Square test, we are testing the independence of the two observed factors. From this test, we should note: not every cell has at least 5 observations our test approximation may be incorrect as a result Chi-Square - X and Y chisq.test(mtcars$cyl, mtcars$am) ## ## Pearson&#39;s Chi-squared test ## ## data: mtcars$cyl and mtcars$am ## X-squared = 8.7407, df = 2, p-value = 0.01265 This is a chi-squared test comparing engine cylinders across cars grouped by transmission type, from the mtcars data set. This test was conducted using vectors. From this test, we see: p = 0.0126466 We can determine that there is a significant difference between the distribution of cylinders across cars grouped by transmission type. We should reference the table to determine the differences. Chi-Square - Table chitab = table(mtcars$cyl, mtcars$am) chisq.test(chitab) ## ## Pearson&#39;s Chi-squared test ## ## data: chitab ## X-squared = 8.7407, df = 2, p-value = 0.01265 This is a chi-squared test comparing engine cylinders across cars grouped by transmission type, from the mtcars data set. This test was conducted using a table. From this test, we see: p = 0.0126466 We can determine that there is a significant difference between the distribution of cylinders across cars grouped by transmission type. We should reference the table to determine the differences. Linear Model - Y by X summary(lm(mtcars$mpg ~ mtcars$hp)) ## ## Call: ## lm(formula = mtcars$mpg ~ mtcars$hp) ## ## Residuals: ## Min 1Q Median 3Q Max ## -5.7121 -2.1122 -0.8854 1.5819 8.2360 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 30.09886 1.63392 18.421 &lt; 2e-16 *** ## mtcars$hp -0.06823 0.01012 -6.742 1.79e-07 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 3.863 on 30 degrees of freedom ## Multiple R-squared: 0.6024, Adjusted R-squared: 0.5892 ## F-statistic: 45.46 on 1 and 30 DF, p-value: 1.788e-07 This is a linear model of how horsepower predicts miles per gallon, from the mtcars data set. From this test, we see: B0 Estimate = 30.0988605 B1 Estimate = -0.0682283 B1 p = 1.7878353^{-7} Adj R Square = 0.5891853 We can determine that there is a significant negative linear relationship between fuel economy and engine horsepower. This model accounts for 58.9% of the observed change. Linear Model - Y by X + X summary(lm(mtcars$mpg ~ mtcars$hp + mtcars$wt)) ## ## Call: ## lm(formula = mtcars$mpg ~ mtcars$hp + mtcars$wt) ## ## Residuals: ## Min 1Q Median 3Q Max ## -3.941 -1.600 -0.182 1.050 5.854 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 37.22727 1.59879 23.285 &lt; 2e-16 *** ## mtcars$hp -0.03177 0.00903 -3.519 0.00145 ** ## mtcars$wt -3.87783 0.63273 -6.129 1.12e-06 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 2.593 on 29 degrees of freedom ## Multiple R-squared: 0.8268, Adjusted R-squared: 0.8148 ## F-statistic: 69.21 on 2 and 29 DF, p-value: 9.109e-12 B0 Estimate = 37.2272701 B1 Estimate = -0.0317729 B2 Estimate = -3.8778307 B1 p = 0.0014512 B2 p = 1.1196471^{-6} Adj R Square = 0.8148396 We can determine that there is a significant negative linear relationship between fuel economy and engine horsepower + vehicle weight. This model accounts for 81.5% of the observed change. Linear Model - Y by X + X + X:X summary(lm(mtcars$mpg ~ mtcars$hp * mtcars$wt)) ## ## Call: ## lm(formula = mtcars$mpg ~ mtcars$hp * mtcars$wt) ## ## Residuals: ## Min 1Q Median 3Q Max ## -3.0632 -1.6491 -0.7362 1.4211 4.5513 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 49.80842 3.60516 13.816 5.01e-14 *** ## mtcars$hp -0.12010 0.02470 -4.863 4.04e-05 *** ## mtcars$wt -8.21662 1.26971 -6.471 5.20e-07 *** ## mtcars$hp:mtcars$wt 0.02785 0.00742 3.753 0.000811 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 2.153 on 28 degrees of freedom ## Multiple R-squared: 0.8848, Adjusted R-squared: 0.8724 ## F-statistic: 71.66 on 3 and 28 DF, p-value: 2.981e-13 summary(lm(mtcars$mpg ~ mtcars$hp + mtcars$wt + mtcars$hp:mtcars$wt)) ## ## Call: ## lm(formula = mtcars$mpg ~ mtcars$hp + mtcars$wt + mtcars$hp:mtcars$wt) ## ## Residuals: ## Min 1Q Median 3Q Max ## -3.0632 -1.6491 -0.7362 1.4211 4.5513 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 49.80842 3.60516 13.816 5.01e-14 *** ## mtcars$hp -0.12010 0.02470 -4.863 4.04e-05 *** ## mtcars$wt -8.21662 1.26971 -6.471 5.20e-07 *** ## mtcars$hp:mtcars$wt 0.02785 0.00742 3.753 0.000811 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 2.153 on 28 degrees of freedom ## Multiple R-squared: 0.8848, Adjusted R-squared: 0.8724 ## F-statistic: 71.66 on 3 and 28 DF, p-value: 2.981e-13 B0 Estimate = 49.8084234 B1 Estimate = -0.1201021 B2 Estimate = -8.2166243 B1:B2 Estimate = 0.0278481 B1 p = 4.036243^{-5} B2 p = 5.1992873^{-7} B1:B2 p = 8.1083074^{-4} Adj R Square = 0.872417 We can determine that there is a significant negative linear relationship between fuel economy and engine horsepower + vehicle weight + interaction. This model accounts for 87.2% of the observed change. ANOVA - X by Y summary(aov(mtcars$mpg~as.factor(mtcars$cyl))) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## as.factor(mtcars$cyl) 2 824.8 412.4 39.7 4.98e-09 *** ## Residuals 29 301.3 10.4 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 This is an ANOVA test comparing mean miles per gallon across cars grouped by number of engine cylinders, from the mtcars data set. From this test, we see: p = 4.9789192^{-9} We can determine that there is a significant difference between the mean mpg of cars, based on number of engine cylinders. We do not yet know which groups are different. ANOVA - Multiple Comparisons TukeyHSD(aov(mtcars$mpg~as.factor(mtcars$cyl))) ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = mtcars$mpg ~ as.factor(mtcars$cyl)) ## ## $`as.factor(mtcars$cyl)` ## diff lwr upr p adj ## 6-4 -6.920779 -10.769350 -3.0722086 0.0003424 ## 8-4 -11.563636 -14.770779 -8.3564942 0.0000000 ## 8-6 -4.642857 -8.327583 -0.9581313 0.0112287 This is a Tukey multiple comparisons test comparing the differences between observed groups from our significant ANOVA test. From this test, we see: P: 6-4 = 3.4237205^{-4} P: 8-4 = 2.5439802^{-9} P: 8-6 = 0.0112287 We can determine that there is a significant difference between the mean mpg of cars, based on number of engine cylinders, across all observed groups. Goals At the end of the Lab, we have learned: How to pick a statistical test for your data How to run statistical tests in R How to interpret the results of statistical tests "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
